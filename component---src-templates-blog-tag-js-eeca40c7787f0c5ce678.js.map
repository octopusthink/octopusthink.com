{"version":3,"sources":["webpack:///./src/templates/Blog/Tag.js","webpack:///./src/components/PageBody/index.js"],"names":["BlogTags","props","pageSummary","pageTitle","pageSlug","data","pageContext","posts","tag","edges","length","tagData","node","name","summary","config","blogUrl","title","description","pathname","map","fields","readingTime","timeToRead","date","slug","key","light","pageQuery","PageBody","children","theme","useTheme","css","colors","neutral","white","site","mobilePadding","tabletPadding","desktopPadding","maxSiteWidth","maxContentWidth"],"mappings":"sUAYaA,EAAW,SAACC,GAAW,IAI9BC,EACAC,EACAC,EALIC,EAAsBJ,EAAtBI,KAAMC,EAAgBL,EAAhBK,YACNC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IAMf,GAAIA,EAAIC,MAAMC,OAAS,EAAG,CACxB,IAAMC,EAAUH,EAAIC,MAAM,GAAGG,KAC7BT,EAAS,iBAAoBQ,EAAQE,KACrCX,EAAcS,EAAQG,QACtBV,EAAcW,IAAOC,QAAb,QAA4BL,EAAQE,UAE5CV,EAAS,iBAAoBG,EAAYE,IACzCN,EAAW,oCAAuCI,EAAYE,IAC9DJ,EAAcW,IAAOC,QAAb,QAA4BV,EAAYE,IAGlD,OACE,cAAC,IAAD,KACE,cAAC,IAAD,CAAKS,MAAOd,EAAWe,YAAahB,EAAaiB,SAAUf,IAC3D,cAAC,IAAD,KACE,cAAC,IAAD,CAAYU,QAASZ,EAAae,MAAOd,IACzC,cAAC,IAAD,KACGI,EAAME,MAAMW,KAAI,YAAe,IAAZR,EAAW,EAAXA,KACVS,EAAoCT,EAApCS,OAAoBC,EAAgBV,EAA5BW,WACRC,EAA+BH,EAA/BG,KAAMC,EAAyBJ,EAAzBI,KAAMX,EAAmBO,EAAnBP,QAASG,EAAUI,EAAVJ,MAE7B,OACE,cAAC,WAAD,CAAUS,IAAKD,GACb,cAAC,IAAD,CACED,KAAMA,EACNF,YAAaA,EACbG,KAAMA,EACNX,QAASA,EACTG,MAAOA,SAMjB,cAAC,IAAD,CAASU,OAAK,OAMTC,EAAS,aA8CP5B,a,kCC1Gf,wCA6Ce6B,IAzCE,SAAC5B,GAAW,IACnB6B,EAAa7B,EAAb6B,SACFC,EAAQC,qBAEd,OACE,yBACEC,IAAKA,cAAF,cACaF,EAAMG,OAAOC,QAAQC,MADlC,oEAKeL,EAAMM,KAAKC,cAL1B,kBAMgBP,EAAMM,KAAKC,cAN3B,+HAaiBP,EAAMM,KAAKE,cAb5B,kBAckBR,EAAMM,KAAKE,cAd7B,uDAiBiBR,EAAMM,KAAKG,eAjB5B,kBAkBkBT,EAAMM,KAAKG,eAlB7B,cAmBcT,EAAMM,KAAKI,aAnBzB,OAuBH,qBACER,IAAKA,cAAF,aACYF,EAAMM,KAAKK,gBADvB,oBAKFZ","file":"component---src-templates-blog-tag-js-eeca40c7787f0c5ce678.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport Divider from 'components/Divider';\nimport PageBody from 'components/PageBody';\nimport PageHeader from 'components/PageHeader';\nimport PageWrapper from 'components/PageWrapper';\nimport PostCard from 'components/PostCard';\nimport SEO from 'components/SEO';\nimport config from 'data/SiteConfig';\nimport App from 'templates/App';\n\nexport const BlogTags = (props) => {\n  const { data, pageContext } = props;\n  const { posts, tag } = data;\n\n  let pageSummary;\n  let pageTitle;\n  let pageSlug;\n\n  if (tag.edges.length > 0) {\n    const tagData = tag.edges[0].node;\n    pageTitle = `Posts tagged #${tagData.name}`;\n    pageSummary = tagData.summary;\n    pageSlug = `${config.blogUrl}tags/${tagData.name}`;\n  } else {\n    pageTitle = `Posts tagged #${pageContext.tag}`;\n    pageSummary = `An archive of blog posts tagged #${pageContext.tag}`;\n    pageSlug = `${config.blogUrl}tags/${pageContext.tag}`;\n  }\n\n  return (\n    <App>\n      <SEO title={pageTitle} description={pageSummary} pathname={pageSlug} />\n      <PageWrapper>\n        <PageHeader summary={pageSummary} title={pageTitle} />\n        <PageBody>\n          {posts.edges.map(({ node }) => {\n            const { fields, timeToRead: readingTime } = node;\n            const { date, slug, summary, title } = fields;\n\n            return (\n              <Fragment key={slug}>\n                <PostCard\n                  date={date}\n                  readingTime={readingTime}\n                  slug={slug}\n                  summary={summary}\n                  title={title}\n                />\n              </Fragment>\n            );\n          })}\n        </PageBody>\n        <Divider light />\n      </PageWrapper>\n    </App>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($tagId: String!, $nowTimestamp: Int!) {\n    posts: allMdx(\n      sort: { fields: [fields___date], order: DESC }\n      filter: {\n        fileAbsolutePath: { regex: \"//content/blog/\" }\n        fields: { timestamp: { lte: $nowTimestamp }, tags: { elemMatch: { id: { eq: $tagId } } } }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            authors {\n              bio\n              id\n              name\n            }\n            date\n            # readingTime {\n            #   text\n            # }\n            slug\n            summary\n            title\n            tags {\n              id\n              name\n              summary\n            }\n          }\n          timeToRead\n        }\n      }\n    }\n    tag: allTagsYaml(filter: { id: { eq: $tagId } }) {\n      edges {\n        node {\n          id\n          summary\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default BlogTags;\n","import { useTheme } from '@octopusthink/nautilus';\nimport React from 'react';\nimport { css } from '@emotion/core';\n\nconst PageBody = (props) => {\n  const { children } = props;\n  const theme = useTheme();\n\n  return (\n    <section\n      css={css`\n        background: ${theme.colors.neutral.white};\n        margin: 0 auto;\n        padding-top: 8rem;\n        padding-bottom: 8rem;\n        padding-left: ${theme.site.mobilePadding};\n        padding-right: ${theme.site.mobilePadding};\n        min-height: 70vh;\n        justify-content: center;\n        display: flex;\n        flex-direction: column;\n\n        @media screen and (min-width: 640px) {\n          padding-left: ${theme.site.tabletPadding};\n          padding-right: ${theme.site.tabletPadding};\n        }\n        @media screen and (min-width: 1024px) {\n          padding-left: ${theme.site.desktopPadding};\n          padding-right: ${theme.site.desktopPadding};\n          max-width: ${theme.site.maxSiteWidth};\n        }\n      `}\n    >\n      <div\n        css={css`\n          max-width: ${theme.site.maxContentWidth};\n          margin: 0 auto;\n        `}\n      >\n        {children}\n      </div>\n    </section>\n  );\n};\n\nexport default PageBody;\n"],"sourceRoot":""}